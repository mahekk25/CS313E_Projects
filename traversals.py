"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Mahek Khandelwal, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:
UT EID 2:
"""


def row_zigzag_traversal(grid):
    """
    Performs a zigzag traversal of a 2D list, alternating between
    left-to-right and right-to-left traversal for each row from
    top-to-bottom, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    tuple_list = []
    i = 0
    for i, row in enumerate(grid):
        if i % 2 == 0:
            for c in range(len(row)):
                tuple_list.append((i,c))
        else:
            for c in range(len(row)-1, -1, -1):
                tuple_list.append((i,c))
    return tuple_list


def column_zigzag_traversal(grid):
    """
    Performs a zigzag traversal of a 2D list, alternating between
    top-to-bottom and bottom-to-top traversal for each column from
    left-to-right, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    cols = len(grid[0])
    rows = len(grid)
    tuple_list = []
    for i, _ in enumerate(range(cols)):
        if i%2 == 0:
            for r in range(rows):
                tuple_list.append((r,i))
        else:
            for r in range(rows-1, -1, -1):
                tuple_list.append((r,i))
    return tuple_list


def main_diagonal_traversal(grid):
    """
    Performs a diagonal traversal of a 2D list, iterating from 
    the top-right to the bottom-left in the direction of the 
    main diagonal, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    rows = len(grid)
    cols = len(grid[0])
    result = []

    for c in range(cols, -1, -1):
        i = 0
        j = c
        while i < rows and j < cols:
            result.append((i,j))
            i+=1
            j+=1
    for r in range(1,rows):
        i = r
        j = 0
        while i < rows and j < cols:
            result.append((i,j))
            i+=1
            j+=1
    return result


def secondary_diagonal_traversal(grid):
    """
    Performs a diagonal traversal of a 2D list, iterating from 
    the top-left to the bottomt-right in the direction of the 
    main diagonal, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    rows = len(grid)
    cols = len(grid[0])
    result = []

    for c in range(cols):
        i = 0
        j = c
        while i < rows and j >=0:
            result.append((i,j))
            i+= 1
            j-=1
    for r in range(1,rows):
        i = r
        j = cols-1
        while i < rows and j >=0:
            result.append((i,j))
            i+=1
            j-=1
    return result

def spiral_traversal(grid):
    """
    Performs a spiral traversal of a 2D list, iterating from 
    the outside rows and columns inward, and returns a list
    of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """
    row = len(grid)
    col = len(grid[0])
    top = 0
    bottom = row - 1
    left = 0
    right = col - 1
    result = []

    while top <= bottom and left <= right:
        for i in range(left,right+1):
            result.append((top, i))
        top+=1
        for i in range(top,bottom+1):
            result.append((i,right))
        right -=1
        if top<= bottom:
            for i in range(right, left-1, -1):
                result.append((bottom, i))
            bottom-=1
        if left<=right:
            for i in range(bottom, top -1, -1):
                result.append((i,left))
            left+=1
    return result
